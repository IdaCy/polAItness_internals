WARNING: Could not find any nv files on this host!
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:32: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  sample_data = torch.load(diff_files[0], map_location="cpu")
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  diff_data = torch.load(file, map_location="cpu")
layer_0 files:   0%|          | 0/125 [00:00<?, ?it/s]layer_0 files:   7%|▋         | 9/125 [00:00<00:01, 89.46it/s]layer_0 files:  26%|██▋       | 33/125 [00:00<00:00, 172.28it/s]layer_0 files:  45%|████▍     | 56/125 [00:00<00:00, 198.06it/s]layer_0 files:  62%|██████▏   | 78/125 [00:00<00:00, 205.07it/s]layer_0 files:  81%|████████  | 101/125 [00:00<00:00, 204.24it/s]layer_0 files: 100%|██████████| 125/125 [00:00<00:00, 201.14it/s]
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  diff_data = torch.load(file, map_location="cpu")
layer_5 files:   0%|          | 0/125 [00:00<?, ?it/s]layer_5 files:  47%|████▋     | 59/125 [00:00<00:00, 589.45it/s]layer_5 files:  94%|█████████▍| 118/125 [00:00<00:00, 519.05it/s]layer_5 files: 100%|██████████| 125/125 [00:00<00:00, 536.42it/s]
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  diff_data = torch.load(file, map_location="cpu")
layer_10 files:   0%|          | 0/125 [00:00<?, ?it/s]layer_10 files:  53%|█████▎    | 66/125 [00:00<00:00, 595.48it/s]layer_10 files: 100%|██████████| 125/125 [00:00<00:00, 590.36it/s]
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  diff_data = torch.load(file, map_location="cpu")
layer_15 files:   0%|          | 0/125 [00:00<?, ?it/s]layer_15 files:  53%|█████▎    | 66/125 [00:00<00:00, 605.91it/s]layer_15 files: 100%|██████████| 125/125 [00:00<00:00, 639.78it/s]
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  diff_data = torch.load(file, map_location="cpu")
layer_20 files:   0%|          | 0/125 [00:00<?, ?it/s]layer_20 files:  53%|█████▎    | 66/125 [00:00<00:00, 654.63it/s]layer_20 files: 100%|██████████| 125/125 [00:00<00:00, 678.34it/s]
/rds/general/user/ifc24/home/activation_training/scripts/analyses/2_pca_pc1.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  diff_data = torch.load(file, map_location="cpu")
layer_25 files:   0%|          | 0/125 [00:00<?, ?it/s]layer_25 files:  53%|█████▎    | 66/125 [00:00<00:00, 654.14it/s]layer_25 files: 100%|██████████| 125/125 [00:00<00:00, 594.11it/s]
/var/spool/pbs/mom_priv/jobs/273584.pbs-7.SC: line 24: nvidia-smi: command not found
